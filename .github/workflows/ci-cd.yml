name: CI/CD Spring Boot â†’ EC2

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR
        run: ./gradlew clean bootJar --no-daemon

      - name: Find built JAR
        id: jar
        run: |
          JAR_PATH=$(ls -1 build/libs/*-SNAPSHOT.jar 2>/dev/null || true)
          if [ -z "$JAR_PATH" ]; then
            JAR_PATH=$(ls -1 build/libs/*.jar | head -n1)
          fi
          echo "jar=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echo "Found: $JAR_PATH"

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy JAR to EC2
        run: |
          REMOTE_DIR="/home/ec2-user/deployment/artifact"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes ec2-user@${{ secrets.DEPLOY_HOST }} "mkdir -p $REMOTE_DIR && sudo chown ec2-user:$${USER:-$USER} $REMOTE_DIR || true"
          scp -i ~/.ssh/id_rsa "${{ steps.jar.outputs.jar }}" ec2-user@${{ secrets.DEPLOY_HOST }}:$REMOTE_DIR/app.jar.tmp
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEPLOY_HOST }} "mv $REMOTE_DIR/app.jar.tmp $REMOTE_DIR/app.jar"

      # >>> Added step: inject 3 app secrets into systemd drop-in and reload <<<
      - name: Update service env on EC2 (3 app secrets)
        run: |
          SERVICE="AiHelperServer"
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEPLOY_HOST }} "\
          set -euo pipefail; \
          sudo mkdir -p /etc/systemd/system/${SERVICE}.service.d && \
          sudo bash -lc 'cat > /etc/systemd/system/'${SERVICE}'.service.d/override.conf <<EOF
          [Service]
          Environment=APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }}
          Environment=APP_NOOP_SECRET=${{ secrets.APP_NOOP_SECRET }}
          Environment=OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}
          Environment=SPRING_PROFILES_ACTIVE=prod
          EOF
          ' && \
          sudo systemctl daemon-reload \
          "
          
      - name: Restart service on EC2
        run: |
          SERVICE="AiHelperServer"            # <-- change to your systemd unit (without .service)
          REMOTE_DIR="/home/ec2-user/deployment/artifact"
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEPLOY_HOST }} "\
            sudo systemctl stop ${SERVICE}.service || true && \
            sudo systemctl daemon-reload || true && \
            sudo systemctl start ${SERVICE}.service && \
            sudo systemctl status ${SERVICE}.service --no-pager -l \
          "
