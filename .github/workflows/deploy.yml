name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar --no-daemon

      - name: Debug build output
        run: ls -R build/libs

      - name: Check for artifacts
        run: |
          shopt -s nullglob
          files=(build/libs/*.jar)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Error: No artifacts found in build/libs/"
            exit 1
          fi
          printf 'Found: %s\n' "${files[@]}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: packaged-application
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: packaged-application
          path: artifact/

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}   # private key content from secret
          source: "artifact/*.jar"
          target: "/home/ec2-user/deployment/"

      - name: Activate JAR name
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -e
            cd /home/ec2-user/deployment
            # pick the first/only jar and move to the expected name
            LATEST_JAR=$(ls -t *.jar | head -n 1)
            echo "Activating: ${LATEST_JAR}"
            sudo chown ec2-user:ec2-user "$LATEST_JAR"
            chmod 0644 "$LATEST_JAR"

            # write/update env file (adjust secrets as needed)
            sudo bash -c 'cat > /etc/spring-boot-app.env <<EOF
            APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }}
            APP_NOOP_SECRET=${{ secrets.APP_NOOP_SECRET }}
            OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}
            EOF'

      - name: Restart service
        run: |
          echo "${{ secrets.DEPLOY_KEY }}" > key.pem
          chmod 400 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.DEPLOY_HOST }} \
            'sudo systemctl restart spring-boot-app'