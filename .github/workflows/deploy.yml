name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar --no-daemon

      - name: Debug build output
        run: ls -R build/libs

      - name: Check for artifacts
        run: |
          shopt -s nullglob
          files=(build/libs/*.jar)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Error: No artifacts found in build/libs/"
            exit 1
          fi
          printf 'Found: %s\n' "${files[@]}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: packaged-application
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: packaged-application
          path: artifact/

      - name: Setup key
        id: setup-key
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" >> $HOME/key.pem
          chmod 400 $HOME/key.pem

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}
          source: "artifact/*.jar"
          target: "/home/ec2-user/deployment/"

#      - name: Activate JAR name (update symlink)
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.DEPLOY_HOST }}
#          username: ec2-user
#          key: ${{ secrets.DEPLOY_KEY }}
#          script: |
#            set -Eeuo pipefail
#
#            BASE_DIR=/home/ec2-user/deployment
#            ART_DIR="$BASE_DIR/artifact"
#            APP_LINK="$BASE_DIR/spring-boot-app.jar"
#
#            mkdir -p "$ART_DIR"
#            cd "$BASE_DIR"
#
#            # pick newest jar from artifact folder
#            LATEST_JAR=$(ls -t "$ART_DIR"/*.jar | head -n 1)
#            if [ -z "${LATEST_JAR:-}" ]; then
#              echo "No JARs found in $ART_DIR"
#              exit 1
#            fi
#
#            echo "Activating: ${LATEST_JAR}"
#            chown ec2-user:ec2-user "$LATEST_JAR"
#            chmod 0644 "$LATEST_JAR"
#
#            # atomically update symlink spring-boot-app.jar -> artifact/<versioned>.jar
#            ln -sfn "$LATEST_JAR" "$APP_LINK"
#            chown -h ec2-user:ec2-user "$APP_LINK"
#
#            # write/update env file
#            sudo install -d -m 0755 /etc
#            sudo bash -c 'cat > /etc/spring-boot-app.env <<EOF
#            APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }}
#            APP_NOOP_SECRET=${{ secrets.APP_NOOP_SECRET }}
#            OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}
#            EOF'
#            sudo chmod 0640 /etc/spring-boot-app.env
#
#            # ensure service file exists and daemon knows it
#            if [ ! -f /etc/systemd/system/spring-boot-app.service ]; then
#            echo "WARNING: /etc/systemd/system/spring-boot-app.service not found."
#            echo "Create it per the snippet in the next section."
#            else
#            sudo systemctl daemon-reload
#            fi

      - name: Connect SSH and Restart Services
        run: |
          ssh -o StrictHostKeyChecking=no -i $HOME/key.pem ec2-user@${{ secrets.DEPLOY_HOST }} '
            sudo systemctl restart spring-boot-app
