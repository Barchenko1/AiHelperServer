name: CI/CD for Spring Boot App

on:
  push:
    branches:
#      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar --no-daemon

      - name: Debug build output
        run: ls -R build/libs

      - name: Check for artifacts
        run: |
          shopt -s nullglob
          files=(build/libs/*.jar)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Error: No artifacts found in build/libs/"
            exit 1
          fi
          printf 'Found: %s\n' "${files[@]}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: packaged-application
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: packaged-application
          path: artifact/

      - name: Setup key
        id: setup-key
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" >> $HOME/key.pem
          chmod 400 $HOME/key.pem
          
          # Ensure target directory is writable by ec2-user
      - name: Prepare remote deploy dir
        run: |
          ssh -o StrictHostKeyChecking=no -i "$HOME/key.pem" ec2-user@${{ secrets.DEPLOY_HOST }} "
          sudo mkdir -p /home/ec2-user/deployment &&
          sudo chown -R ec2-user:ec2-user /home/ec2-user/deployment &&
          sudo chmod 755 /home/ec2-user/deployment
          "

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}
          source: "artifact/*.jar"
          target: "/home/ec2-user/deployment/"

      - name: Write env file on EC2
        run: |
            ssh -o StrictHostKeyChecking=no -i "$HOME/key.pem" ec2-user@${{ secrets.DEPLOY_HOST }} "sudo bash -s" <<'REMOTE'
            set -Eeuo pipefail
            install -d -m 0755 /etc
            # Create/update /etc/AiHelperServer.env with strict perms
            umask 137  # results in 0640 for created files via redirection
            cat > /tmp/AiHelperServer.env <<'EOF_ENV'
            APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }}
            APP_NOOP_SECRET=${{ secrets.APP_NOOP_SECRET }}
            OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}
            EOF_ENV
            sudo mv /tmp/AiHelperServer.env /etc/AiHelperServer.env
            sudo chown root:ec2-user /etc/AiHelperServer.env
            sudo chmod 0640 /etc/AiHelperServer.env
            REMOTE

      - name: Connect SSH and Restart Services
        run: |
          ssh -o StrictHostKeyChecking=no -i $HOME/key.pem ec2-user@${{ secrets.DEPLOY_HOST }} '
            sudo systemctl restart AiHelperServer
          '